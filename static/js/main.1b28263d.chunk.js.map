{"version":3,"sources":["components/display.js","components/numericButton.js","components/operationButton.js","utils/operators.js","utils/procedures.js","utils/layout.js","App.js","index.js"],"names":["Display","children","text","subtext","className","NumericButton","onClick","operationButton","fill","operations","num1","num2","procedures","displayState","valueState","operatorState","setDisplay","setCurrentValue","setOperatorState","_valueState","_operatorState","prevDisplay","length","slice","display","currentValue","lastOperator","setLastOperator","prevValue","operators","isNaN","appLayout","App","currentOperation","useState","map","value","operator","operation","operationButtonHandler","key","number","toString","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1b28263d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './display.css';\r\n\r\nconst Display = (children) => {\r\n  const {text, subtext} = children;\r\n\r\n  return <div className=\"Display\">\r\n    <small>{subtext === null ? '':subtext}</small>\r\n    <p>{text === null ? 'Input numbers':text}</p>\r\n  </div>\r\n}\r\n\r\nexport default Display;","import React from 'react';\r\nimport './numericButton.css';\r\n\r\nconst NumericButton = (children) => {\r\n  return <button onClick={children.onClick} className=\"numeric-button\">\r\n    {children.text}\r\n  </button>\r\n}\r\n\r\nexport default NumericButton;","import React from \"react\";\r\nimport \"./operationButton.css\";\r\n\r\nconst operationButton = (children) => {\r\n  return (\r\n    <button\r\n      onClick={children.onClick}\r\n      className={`operation-button ${children.fill ? 'big-button':  ''}`}\r\n    >\r\n      {children.text}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default operationButton;\r\n","const operations = {\r\n  '+': (num1, num2) => num1 + num2,\r\n  '-': (num1, num2) => num1 - num2,\r\n  '/': (num1, num2) => num1 / num2,\r\n  'X': (num1, num2) => num1 * num2,\r\n  '%': (num1, num2) => num1 % num2,\r\n}\r\n\r\nexport default operations;","import operators from './operators';\r\n\r\nconst procedures = {\r\n  'CE': (displayState, valueState, operatorState) => {\r\n    const [, setDisplay] = displayState;\r\n    const [, setCurrentValue] = valueState;\r\n    const [, setOperatorState] = operatorState;\r\n    setOperatorState(null);\r\n    setDisplay(null);\r\n    setCurrentValue(null);\r\n  },\r\n  'C': (displayState, _valueState, _operatorState) => {\r\n    const [, setDisplay] = displayState;\r\n    setDisplay(null);\r\n  },\r\n  'DEL': (displayState, _valueState, _operatorState) => {\r\n    const [, setDisplay] = displayState;\r\n    setDisplay(prevDisplay => {\r\n      if (prevDisplay === null) return null;\r\n      if (!prevDisplay.length === 1) return null;\r\n      \r\n      return prevDisplay.slice(0, -1);\r\n    });\r\n  },\r\n  '=': (displayState, valueState, operatorState) => {\r\n    const [display, setDisplay] = displayState;\r\n    const [currentValue, setCurrentValue] = valueState;\r\n    const [lastOperator, setLastOperator] = operatorState;\r\n    if (lastOperator === null) {return ;}\r\n    if (display === null || currentValue === null) { return ;}\r\n    setCurrentValue(prevValue => {\r\n      return operators[lastOperator](prevValue, +display);\r\n    });\r\n    setLastOperator(null);\r\n    setDisplay(null);\r\n  },\r\n  '+/-': (displayState, _valueState, _operatorState) => {\r\n    const [display, setDisplay] = displayState;\r\n    if (display === null || isNaN(+display)) return ;\r\n    setDisplay((prevDisplay) => {\r\n      return +prevDisplay * - 1;\r\n    });\r\n  },\r\n  '.': (displayState, _valueState, _operatorState) => {\r\n    const [display, setDisplay] = displayState;\r\n    if (!display) return ;\r\n    setDisplay(prevDisplay => {\r\n      return prevDisplay + \".\";\r\n    })\r\n  },\r\n};\r\n\r\nexport default procedures;","const operations = {\r\n  MOD: \"%\",\r\n  CE: \"CE\",\r\n  C: \"C\",\r\n  DEL: \"DEL\",\r\n  PRODUCT: \"X\",\r\n  SUBSTRACT: \"-\",\r\n  DIVISION: '/',\r\n  ADD: \"+\",\r\n  EQUAL: \"=\",\r\n  SWITCHSIGN: \"+/-\",\r\n  ADDDOT: \".\",\r\n};\r\n\r\nconst appLayout = [\r\n  operations.MOD,\r\n  operations.CE,\r\n  operations.C,\r\n  operations.DEL,\r\n  7,\r\n  8,\r\n  9,\r\n  operations.PRODUCT,\r\n  4,\r\n  5,\r\n  6,\r\n  operations.SUBSTRACT,\r\n  1,\r\n  2,\r\n  3,\r\n  operations.ADD,\r\n  operations.SWITCHSIGN,\r\n  0,\r\n  operations.ADDDOT,\r\n  operations.DIVISION,\r\n  operations.EQUAL\r\n];\r\n\r\nexport {operations, appLayout};","import React, { useState } from \"react\";\r\n\r\nimport \"./App.css\";\r\n\r\n// Components.\r\nimport Display from \"./components/display\";\r\nimport NumericButton from \"./components/numericButton\";\r\nimport OperationButton from \"./components/operationButton\";\r\n\r\nimport operators from \"./utils/operators\";\r\nimport procedures from \"./utils/procedures\";\r\nimport { appLayout } from \"./utils/layout\";\r\n\r\nfunction App() {\r\n  const [display, setDisplay] = useState(null);\r\n  const [currentValue, setCurrentValue] = useState(null);\r\n  const [lastOperator, setLastOperator] = useState(null);\r\n\r\n  const operationButtonHandler = (operator) => {\r\n    if (operators[operator]) {\r\n      setLastOperator(operator);\r\n      const operation = operators[operator];\r\n      // Do the math.\r\n      if (currentValue === null) {\r\n        setCurrentValue(+display);\r\n        setDisplay(null);\r\n      } else if(display) {\r\n        setCurrentValue((prevValue) => {\r\n          setDisplay(null);\r\n          return operation(prevValue, +display);\r\n        });\r\n      }\r\n    } else {\r\n      // Do the procedure.\r\n      procedures[operator](\r\n        [display, setDisplay],\r\n        [currentValue, setCurrentValue],\r\n        [lastOperator, setLastOperator]\r\n      );\r\n    }\r\n  };\r\n\r\n  const numericButtonHandler = (number) => {\r\n    setDisplay((prevDisplay) =>\r\n      prevDisplay === null || +prevDisplay === 0 ? number.toString() : prevDisplay + number.toString()\r\n    );\r\n  };\r\n\r\n  let currentOperation;\r\n\r\n  if (currentValue !== null && lastOperator !== null) {\r\n    currentOperation = `${currentValue} ${lastOperator} ...`;\r\n  }\r\n\r\n  if (display !== null && currentValue !== null && lastOperator !== null) {\r\n    currentOperation = `${currentValue} ${lastOperator} ${display}`;\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Display text={display === null ? currentValue: display} subtext={currentOperation} />\r\n      <div className=\"calc-buttons\">\r\n        {appLayout.map((value) => {\r\n          return isNaN(+value) ? (\r\n            <OperationButton\r\n              onClick={() => operationButtonHandler(value)}\r\n              key={`btn-${value}`}\r\n              text={value}\r\n              fill={value === '='}\r\n            />\r\n          ) : (\r\n            <NumericButton\r\n              onClick={() => numericButtonHandler(value)}\r\n              key={`btn-${value}`}\r\n              text={value}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    <p className=\"warning-resolution\">Resolution is too low to show a calculator.</p>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}