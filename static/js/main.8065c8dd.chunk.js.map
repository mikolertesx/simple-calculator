{"version":3,"sources":["components/display.js","components/numericButton.js","components/operationButton.js","utils/operators.js","utils/procedures.js","utils/layout.js","App.js","index.js"],"names":["Display","children","text","className","NumericButton","onClick","operationButton","operations","num1","num2","procedures","displayState","valueState","setDisplay","setCurrentValue","_valueState","_operatorState","prevDisplay","length","slice","operatorState","display","currentValue","lastOperator","setLastOperator","prevValue","operators","isNaN","appLayout","App","useState","map","value","operator","operation","operationButtonHandler","key","number","toString","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8065c8dd.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './display.css';\r\n\r\nconst Display = (children) => {\r\n  const {text} = children;\r\n\r\n  return <div className=\"Display\">\r\n    <p>{text || 'Input numbers.'}</p>\r\n  </div>\r\n}\r\n\r\nexport default Display;","import React from 'react';\r\nimport './numericButton.css';\r\n\r\nconst NumericButton = (children) => {\r\n  return <button onClick={children.onClick} className=\"numeric-button\">\r\n    {children.text}\r\n  </button>\r\n}\r\n\r\nexport default NumericButton;","import React from 'react';\r\nimport './operationButton.css';\r\n\r\nconst operationButton = (children) => {\r\n  return <button onClick={children.onClick} className=\"operation-button\">\r\n    {children.text}\r\n  </button>\r\n}\r\n\r\nexport default operationButton;","const operations = {\r\n  '+': (num1, num2) => num1 + num2,\r\n  '-': (num1, num2) => num1 - num2,\r\n  '/': (num1, num2) => num1 / num2,\r\n  'X': (num1, num2) => num1 * num2,\r\n  '%': (num1, num2) => num1 % num2,\r\n}\r\n\r\nexport default operations;","import operators from './operators';\r\n\r\nconst procedures = {\r\n  'CE': (displayState, valueState) => {\r\n    const [, setDisplay] = displayState;\r\n    const [, setCurrentValue] = valueState;\r\n    setDisplay(null);\r\n    setCurrentValue(null);\r\n  },\r\n  'C': (displayState, _valueState, _operatorState) => {\r\n    const [, setDisplay] = displayState;\r\n    setDisplay(null);\r\n  },\r\n  'DEL': (displayState, _valueState, _operatorState) => {\r\n    const [, setDisplay] = displayState;\r\n    setDisplay(prevDisplay => {\r\n      if (!prevDisplay) return null;\r\n      if (!prevDisplay.length === 1) return null;\r\n      \r\n      return prevDisplay.slice(0, -1);\r\n    });\r\n  },\r\n  '=': (displayState, valueState, operatorState) => {\r\n    const [display, setDisplay] = displayState;\r\n    const [currentValue, setCurrentValue] = valueState;\r\n    const [lastOperator, setLastOperator] = operatorState;\r\n    if (lastOperator === null) {return ;}\r\n    if (!display || !currentValue) { return ;}\r\n    setCurrentValue(prevValue => {\r\n      return operators[lastOperator](prevValue, +display);\r\n    });\r\n    setLastOperator(null);\r\n    setDisplay(null);\r\n  },\r\n  '+/-': (displayState, _valueState, _operatorState) => {\r\n    const [display, setDisplay] = displayState;\r\n    if (!display || isNaN(+display)) return ;\r\n    setDisplay((prevDisplay) => {\r\n      return +prevDisplay * - 1;\r\n    });\r\n  },\r\n  '.': (displayState, _valueState, _operatorState) => {\r\n    const [display, setDisplay] = displayState;\r\n    if (!display) return ;\r\n    setDisplay(prevDisplay => {\r\n      return prevDisplay + \".\";\r\n    })\r\n  },\r\n};\r\n\r\nexport default procedures;","const operations = {\r\n  MOD: \"%\",\r\n  CE: \"CE\",\r\n  C: \"C\",\r\n  DEL: \"DEL\",\r\n  PRODUCT: \"X\",\r\n  SUBSTRACT: \"-\",\r\n  ADD: \"+\",\r\n  EQUAL: \"=\",\r\n  SWITCHSIGN: \"+/-\",\r\n  ADDDOT: \".\",\r\n};\r\n\r\nconst appLayout = [\r\n  operations.MOD,\r\n  operations.CE,\r\n  operations.C,\r\n  operations.DEL,\r\n  7,\r\n  8,\r\n  9,\r\n  operations.PRODUCT,\r\n  4,\r\n  5,\r\n  6,\r\n  operations.SUBSTRACT,\r\n  1,\r\n  2,\r\n  3,\r\n  operations.ADD,\r\n  operations.SWITCHSIGN,\r\n  0,\r\n  operations.ADDDOT,\r\n  operations.EQUAL,\r\n];\r\n\r\nexport {operations, appLayout};","import React, { useState } from \"react\";\r\n\r\nimport \"./App.css\";\r\n\r\n// Components.\r\nimport Display from \"./components/display\";\r\nimport NumericButton from \"./components/numericButton\";\r\nimport OperationButton from \"./components/operationButton\";\r\n\r\nimport operators from \"./utils/operators\";\r\nimport procedures from \"./utils/procedures\";\r\nimport { appLayout } from \"./utils/layout\";\r\n\r\nfunction App() {\r\n  const [display, setDisplay] = useState(null);\r\n  const [currentValue, setCurrentValue] = useState(null);\r\n  const [lastOperator, setLastOperator] = useState(null);\r\n\r\n  const operationButtonHandler = (operator) => {\r\n    if (operators[operator]) {\r\n      setLastOperator(operator);\r\n      const operation = operators[operator];\r\n      // Do the math.\r\n      if (currentValue === null) {\r\n        setCurrentValue(+display);\r\n        setDisplay(null);\r\n      } else if(display) {\r\n        setCurrentValue((prevValue) => {\r\n          setDisplay(null);\r\n          return operation(prevValue, +display);\r\n        });\r\n      }\r\n    } else {\r\n      // Do the procedure.\r\n      procedures[operator](\r\n        [display, setDisplay],\r\n        [currentValue, setCurrentValue],\r\n        [lastOperator, setLastOperator]\r\n      );\r\n    }\r\n  };\r\n\r\n  const numericButtonHandler = (number) => {\r\n    setDisplay((prevDisplay) =>\r\n      prevDisplay === null ? number.toString() : prevDisplay + number.toString()\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Display text={display || currentValue} />\r\n      <div className=\"calc-buttons\">\r\n        {appLayout.map((value) => {\r\n          return isNaN(+value) ? (\r\n            <OperationButton\r\n              onClick={() => operationButtonHandler(value)}\r\n              key={`btn-${value}`}\r\n              text={value}\r\n            />\r\n          ) : (\r\n            <NumericButton\r\n              onClick={() => numericButtonHandler(value)}\r\n              key={`btn-${value}`}\r\n              text={value}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    <p className=\"warning-resolution\">Resolution is too low to show a calculator.</p>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}